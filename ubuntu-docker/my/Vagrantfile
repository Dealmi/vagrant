# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

#This is my file!
manager_ip = "192.168.100.10"

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.vm.define "docker1" do |docker1|
    docker1.vm.box = "ubuntu/focal64"
    docker1.vm.hostname = "docker1"
    docker1.vm.network "private_network", ip: "#{manager_ip}"
    docker1.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get upgrade -y
      sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release ansible ansible-lint ansible-doc net-tools -y
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo \
      "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get install docker-ce docker-ce-cli containerd.io
      usermod -a -G docker vagrant
      useradd -m vag
      echo "1qaz2wsx\n1qaz2wsx" | passwd vag
      hostnamectl set-hostname node1
      docker swarm init --advertise-addr #{manager_ip}
      docker swarm join-token -q worker > /home/vag/token
      
    SHELL
  end

  config.vm.define "docker2" do |docker2|
    docker2.vm.box = "ubuntu/focal64"
    docker2.vm.hostname = "docker2"
    docker2.vm.network "private_network", ip: "192.168.100.20"
    docker2.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get upgrade -y
      sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release ansible ansible-lint ansible-doc sshpass net-tools -y
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo \
      "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get install docker-ce docker-ce-cli containerd.io
      usermod -a -G docker vagrant
      sshpass -p '1qaz2wsx' scp vag@#{manager_ip}:token token
      hostnamectl set-hostname node2
      docker swarm join --token `cat token` #{manager_ip} 
    SHELL
  end
  
  config.vm.define "docker3" do |docker3|
    docker3.vm.box = "ubuntu/focal64"
    docker3.vm.hostname = "docker3"
    docker3.vm.network "private_network", ip: "192.168.100.30"
    docker3.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get upgrade -y
      sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release ansible ansible-lint ansible-doc sshpass net-tools -y
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo \
      "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get install docker-ce docker-ce-cli containerd.io
      usermod -a -G docker vagrant
      sshpass -p '1qaz2wsx' scp vag@#{manager_ip}:token token
      hostnamectl set-hostname node3
      docker swarm join --token `cat token` #{manager_ip} 
    SHELL
  end
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "ubuntu/focal64"

  #Waiting timeout 
  config.vm.boot_timeout = 99999

  #Hostname
  #config.vm.hostname = "kube-node2"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  vb.memory = "8192"
  #more custom options here
  vb.cpus = "1"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
 
end
